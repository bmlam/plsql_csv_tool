define pi_ticket_nr=&1 

set serverout on 






--CREATE OR REPLACE PROCEDURE lam_test_p1 as
DECLARE 
   lv_ticket_nr VARCHAR2(20 CHAR) := '&pi_ticket_nr'; 
   lv_output_table VARCHAR2(1000 CHAR); 

   gc_pkg_name constant varchar2(30) := $$plsql_unit;
   gc_nl        CONSTANT VARCHAR2 (10)      := CHR (10); 
   gc_dos_eol        CONSTANT VARCHAR2 (10)      := CHR (13) || CHR (10);   -- DOS style End Of Line
   gc_unix_eol       CONSTANT VARCHAR2 (10)      := CHR (10);   -- Unix style End Of Line
   gc_dos_eol_len    CONSTANT PLS_INTEGER        := length/*c*/ (gc_dos_eol);
   gc_unix_eol_len   CONSTANT PLS_INTEGER        := length/*c*/ (gc_unix_eol);
   g_col_sep             varchar2(10) ;

  type t_column_dtype_map is table of all_tab_columns.data_type%type index by varchar2(30);
  type t_column_dtype_tab is table of all_tab_columns.data_type%type ;

  -- check for the tool which generates the the following collection initialization block:

  ltab_csv_chunks ORA_MINING_VARCHAR2_NT := 
  ORA_MINING_VARCHAR2_NT (/* chunk 1 */q'[WRK_ID
886514185 
1301386831 
3117479223 
3117479567 
3733054669 
3394875159 
3847729341 
895334417 
1382675933 
2776907069 
3502257843 
3501928717 
3578090601 
3690379751 
3712091677 
3821532087 
2200214155 
3272409933 
3820983513 
3821105491 
3834244887 
2940566173 
3501193295 
3577040485 
3689578945 
2940021035 
3116048287 
3794648763 
3820535107 
3820492513 
3820789763 
3820581329 
3820662127 
3820679787 
2395660019 
3270273779 
3499919027 
3500051029 
3499794387 
3500209971 
3820158141 
3626699973 
3270213127 
3270166063 
3819937631 
1597716749 
2198315145 
3654606493 
3654725395 
3819423025 
2568877325 
3862345881 
3268772671 
3268885799 
1515616325 
3793736611 
2197139431 
2392428385 
2392568899 
3267942387 
2392232985 
2392080165 
3112357059 
3497775309 
3497719677 
3497427573 
3497572175 
2391234939 
2595992651 
3861813941 
1376119617 
2196401503 
2391127149 
2390850579 
2595593909 
3496627765 
3731469991 
3901590149 
2196171229 
2390250505 
2390419963 
2595050909 
3791744035 
3817490553 
1514892239 
2195785995 
3622638223 
3651564185 
326607917 
1467584193 
2568913963 
2910422753 
2910535145 
3078477429 
3630655149 
4134779805 
4166834151 
1566024519 
1277225253 
2568880609 
2567274863 
2568488525 
4135877893 
4163675607 
362026569 
361912119 
395770767 
2164844537 
2568286623 
2568342491 
2568378047 
2568400143 
2568340255 
2568183781 
2568226097 
2568194135 
2909719631 
4132414033 
4134033217 
4134204487 
4553612045 
4553644827 
4553432157 
4553773157 
4553903141 
4554107539 
2164168879 
1276735505 
3472663349 
1095975957 
1166614291 
4130848523 
394804709 
324641953 
2567366361 
2567344211 
2567643375 
2567659453 
2567684727 
2567665401 
2567719993 
2567535815 
2567584235 
2567590077 
2567568201 
2567569685 
2567856107 
2567312147 
2567290071 
2567243629 
3073649309 
3076811411 
3368858825 
345033121 
345190571 
2566836547 
2566907981 
2566803479 
2566829983 
2567136567 
2567203725 
2567201801 
2566943793 
2567041851 
2567062389 
2567011955 
3471612649 
3550234727 
3550193129 
4158664561 
429933457 
323604077 
2356602435 
2356657103 
2566407973 
3075606415 
1094510481 
1094526343 
4124682045 
4127920669 
4127950067 
359884343 
3075168745 
3470978925 
3236123067 
409264497 
2355866483 
2743646129 
3073905081 
4123712737 
4123732837 
4123394337 
2160708787 
2160867423 
2160386997 
2743187059 
1093128757 
4121312085 
408087067 
2565275543 
4112573139 
4110331629 
1923176281 
4143590045 
4113804365 
4114607243 
4114269623 
4120641659 
2564700255 
3470275671 
4150345477 
374456283 
2907215039 
3233732859 
3469545721 
4117518637 
341601515 
2564485051 
2742044149 
437604175 
3469350987 
3547728559 
3600043849 
4109969433 
4111728155 
4117113345 
4117391795 
4147139859 
4146816555 
4147784057 
4148185527 
4148617609 
1271972255 
405278255 
1090601125 
1090601147 
4109215295 
4145148089 
4146308231 
4146334689 
1465377709 
3233505159 
1089944879 
3599362723 
3233281001 
1089616533 
4106361095 
4107017361 
4142656783 
4142470747 
403771829 
1088935505 
403058253 
2562320157 
4478802411 
2154733419 
4143640655 
4485814157 
4486378575 
1464773647 
2741255105 
4104878727 
4484464669 
4484134651 
1270528915 
3071047619 
4104551551 
4141593675 
4482831503 
337815751 
338152453 
2351463879 
3231261895 
3230928715 
4098499603 
2351413337 
2351183261 
2351220407 
2350985749 
2351240271 
2350899015 
2350922753 
2561764867 
2740576307 
4478171103 
4479276911 
4480713327 
369837379 
1463708293 
389087767 
2350666739 
2350568757 
2350468581 
2350414727 
2350737153 
2350747135 
2350530439 
2350368367 
388804509 
2154979189 
3361999761 
3362015569 
4475770785 
2153860865 
3228940789 
3361720191 
3464136553 
2350315089 ]' 
 , q'[WRK_ID
2350285617 
2350067875 
2350087481 
2350109035 
2350230699 
2350239865 
2350004249 
2350189991 
2349922579 
2349931687 
3229052249 
3229257777 
4475566573 
353696261 
2349869707 
2349770511 
2349786027 
368597209 
368289797 
2154045211 
2349719245 
2349525213 
2349490175 
2349689939 
2349656467 
2349471063 
2349411523 
2349364559 
2349333729 
387319545 
4308470369 
4473191431 
4473133383 
368062473 
2349224623 
2349249539 
2349170483 
2348978433 
2348863841 
2349130061 
2348731745 
3068486625 
3463972845 
3541674215 
3541431749 
4458606117 
4458666455 
4458644279 
4458407393 
4457864015 
3462991395 
4307426427 
4473033225 
4472924547 
4473107075 
352509329 
386277575 
2348649797 
419509843 
3597253855 
4468223309 
4468255939 
4468164511 
4472288301 
418515267 
1084398951 
3227509953 
4466404375 
4469599589 
366976939 
385153341 
454769823 
2560710913 
4464111225 
4464244169 
398964241 
1191549289 
4462078289 
4463290065 
366076897 
366122011 
4459082209 
4459066681 
4458594075 
4458848723 
4461129749 
454056507 
2737590955 
4459040231 
4460082741 
4460352089 
330377287 
3360634321 
3100477781 
3100355541 
3489991611 
3489206389 
3488966229 
3487940123 
3610727627 
3097495071 
4454273747 
349117703 
382031593 
382077257 
3359376079 
2195396939 
3110082707 
3729943081 
2194885627 
3109657095 
3265116011 
3389935829 
2586107049 
2377198869 
2924565485 
1297383879 
1297306731 
1297187205 
1297304779 
1297487965 
3641180265 
3641180275 
3384080677 
3488134317 
3611415449 
3640384551 
3670361047 
3669963557 
2757968439 
999484509 
1574891103 
1574560167 
3382781493 
3255993827 
1572996515 
1573327159 
3097673925 
3097774373 
3097790471 
3097538465 
3097576733 
3609978889 
3252716617 
4447733095 
3097404413 
2582404297 
3638842469 
1947144745 
3096507073 
3096569547 
3096309933 
995332795 
1571296061 
3095325847 
3380571651 
994461369 
2181892139 
2181662385 
2581199645 
2181312569 
2181433009 
2181293173 
2181070359 
2181091371 
2580425255 
3094273413 
2180481631 
2181028781 
2180966233 
2180877199 
2180463009 
3109056967 
3264876479 
3264888697 
3621900845 
2768560735 
2768979123 
2933136525 
2932999989 
3650155035 
3789524601 
3843202073 
3843313427 
328981567 
328965989 
328931027 
2839962157 
2556325963 
2734688211 
3063268519 
4447165119 
4442956601 
2931637025 
2555290037 
2555581829 
2555215973 
2555427445 
4445844361 
4445686761 
4445664345 
4444707101 
4445201813 
4445222759 
4445260557 
452948045 
4443311573 
4442671191 
4442889003 
2194239333 
2932585495 
2932600289 
2932624703 
2932469559 
2932493577 
2932460061 
2932678507 
2932888249 
2932916083 
2932388419 
3263962943 
3264138689 
3899463235 
2931914291 
2932132585 
2932203937 
2932215373 
2932284717 
2932322173 
2931833049 
3742601101 
3941648427 
2193734879 
2591525677 
2931464931 
2931453623 
2931437499 
2931525869 
2931554867 
2931506869 
2931392669 
2931602507 
3757813933 
3799757903 
3826906441 
2931662481 
2931740465 
2931715049 
2931737403 
2931775003 
2931340107 
3681148323 
3726148503 
3773424811 
2591265097 
2591125581 
2931110413 
2931186735 
2931161755 
2931245531 
2931276249 
3726115721 
3726092169 
3857564093 
3857804575 
1370636163 
3388341325 
2385802017 
2590709589 
2590827593 
2765541075 
2930585129 
3725296865 
3757884683 
3957124223 
1286004347 
3702860387 
3724503511 
3724115553 
3756891067 
3939216555 
2192384877 
3105400111 
3914040187 
3945765925 
3963501119 
2191728019 
3387779211 
3262045963 
3952129931 
3722401565 
3722423499 
3722547793 
2588951777 
3968306735 
3895853483 
1369188399 
3722472247 
3770574181 
3944886959 
3721364389 
3839218973 
2190668405 
3260242793 
3720365297 
1584297313 
1584467643 
3768689037 ]' 
 , q'[WRK_ID
3797884051 
3853321371 
3873926915 
3873566165 
3951435001 
3962443551 
3962335553 
3967519127 
1955624967 
2189472741 
3643565845 
3698333183 
3737395997 
3837538619 
3951194695 
3955273883 
3954849569 
2926225787 
1955273345 
3718224327 
1582748201 
1954664809 
3718535611 
3718385287 
1582590137 
1582342539 
1954104261 
3992394109 
3966996453 
3954379153 
3673054255 
3673292023 
1280705429 
1363529171 
3221900577 
2895729999 
2143380679 
3356925765 
4431635241 
4428333115 
3970272229 
3979133877 
3989910729 
3990945253 
4000514425 
4442556559 
2145536439 
2145821679 
3222004543 
4440766057 
2145036531 
3221710193 
4438059091 
4438535445 
4438759641 
4439026253 
4437039287 
4437177735 
4437237905 
4437079647 
4435078261 
4435158801 
4436334363 
2144260355 
1262260177 
2894939435 
3220134777 
4434234501 
4434324167 
4432618023 
4431917623 
4431776863 
2894739275 
4431122959 
4431320653 
2894154265 
3058101375 
4429099249 
4430284347 
4430248875 
4430582685 
4429954563 
3057528275 
4428587573 
4427352811 
4427319067 
2892649825 
4419939477 
4420087411 
4362158899 
4427527699 
4426988855 
4427106195 
4427037839 
1144033545 
1144050937 
1143914681 
1143969665 
1143994979 
3056922645 
3355642673 
4425659343 
2141445455 
4424775415 
4424580239 
4423991243 
4424081721 
4424170107 
4424202807 
4424243603 
4423914791 
4425236303 
4425251085 
2728556655 
2891955755 
4423474707 
4423716631 
2891413211 
4367265241 
4422457213 
4366221519 
4419696309 
4420087653 
4419636447 
4420266985 
4420287907 
2140089969 
1140761009 
4417618029 
4418917695 
2139869953 
2890041471 
2889948259 
4361469085 
3637989239 
2178454901 
4362646827 
4362516875 
4365114027 
2726839857 
2726773325 
2727010605 
4359699893 
4360041095 
4416037801 
2137990199 
4358495839 
4414927541 
4414842785 
4415481379 
4415611431 
2180374057 
2180368327 
2180313301 
2180110307 
2180084405 
2179975357 
2179962543 
2370048405 
3093563529 
1943332989 
2179364423 
2179534671 
2179649773 
2179658785 
2179739531 
2179606327 
2179564463 
2179809537 
2179782803 
2179475355 
1024440445 
2179100705 
2179019297 
2178852061 
2178742227 
3092256969 
3092303171 
3092496895 
3092597463 
3607796715 
3637505927 
1073942133 
2178542523 
2723534593 
2721345151 
2178718475 
3091773353 
3091557257 
3091514871 
2178270567 
2178077155 
2752585197 
3091417719 
3481087195 
3664534457 
1941327455 
1941109345 
3090906609 
3480313007 
3480313009 
3480500711 
3606009805 
3635815861 
3479784373 
1071520057 
452094185 
2137668669 
2544053245 
2889006879 
4413324375 
4415535013 
2136846529 
2136651127 
2542585621 
3353533641 
4409710877 
4410983957 
1137962839 
2332671861 
3540120543 
4406709707 
3352011127 
4405132191 
4406481617 
2723233545 
2723328979 
1136925171 
4402626121 
2722015569 
2721730967 
3212047295 
2721425505 
2721592499 
3350914085 
2718305527 
3046740499 
2715839151 
2721124467 
2721230037 
2721278395 
3211627347 
1550655829 
1550688149 
1903559635 
1133553761 
3049599873 
1549167193 
2719742007 
2719520937 
1132646523 
3049192735 
3049409637 
2719104249 
4399548649 
2718489409 
2718528517 
3209346735 
3459278911 
1131163841 
2718257925 
2718182355 
2718151005 
2718394191 
2717925811 
2717838447 
1130173641 
3047153017 
3537476285 
3537374321 
2330368787 
3537257547 
3458429671 
2330077939 
2881989199 
3207649989 
3536596637 
3536167249 
2715924961 
2715601587 
2715392365 
2715421315 
2715466083 
2715479117 
3044277641 
3344766665 
2127125315 
2715374141 
4398218495 
2715086199 
2715027107 
2715130861 
2714931915 
2715248531 
2715304007 
2714768697 
2714591221 
2714635715 
2714171755 
2714717293 
3043789731 
2713992981 
2713908917 
2713938571 
2713962789 
2713615693 ]' 
 , q'[WRK_ID
2713556845 
2714051665 
2713518117 
2880523465 
4568797081 
4568784093 
2713229055 
2713173709 
2713380257 
2713396255 
2713096161 
2328134239 
2712605217 
3204964505 
3204979333 
3205104747 
2532235885 
3042840355 
2327273169 
3456866943 
2712349355 
1894417847 
3042598555 
2878273089 
2325138075 
4396909307 
3203449261 
3456254371 
2704656715 
1538080103 
2322756689 
2322623443 
2322375425 
2708442615 
2708616039 
2708634607 
2708504333 
2708255113 
2708282251 
2708219569 
2877140373 
2707798599 
2707950623 
2707981605 
2708193209 
2707630185 
2707659615 
2707699787 
2707724405 
446618013 
446691469 
2125506713 
2707160173 
2707225809 
2707513989 
2707384345 
2707587359 
2707288807 
2706999339 
2125055723 
2706865697 
2706775899 
2706695003 
2706657169 
4395570131 
2705968163 
2705690707 
2705721033 
2705609907 
2705630573 
2705578627 
2320260733 
2123458755 
2705046861 
2705011295 
2704855773 
2704841671 
1888384295 
4566516999 
1532232983 
3455794385 
3455436981 
2316432683 
2704633967 
2704555189 
2704588693 
2704418921 
2875795787 
1534104849 
2123272973 
4567536419 
4567473263 
4567304471 
4567327027 
465613355 
1887033291 
4394756733 
2317972379 
2317899691 
2317890379 
2318042417 
2318005535 
2317826467 
4562826427 
4563669491 
444771175 
2317463171 
2317431077 
2317714687 
3037639339 
4565390443 
2316994021 
2316927475 
2317097353 
2317151745 
2317171469 
2317049033 
2316819153 
2316860739 
2875274359 
4394329123 
2874861107 
3036750323 
4561575093 
463967287 
3455411675 
2316320697 
2316385709 
2698555449 
2118422653 
1121596197 
4559451869 
4559355049 
463187349 
1240797979 
1121163135 
2873875957 
1528753487 
1056162403 
2315435935 
2700387493 
3454715421 
1882968507 
3197449657 
3197249849 
1120428135 
4393251553 
3033054077 
2120862909 
1880655175 
2871348625 
1119729427 
3195988609 
1453541595 
1119005699 
460220181 
482965049 
1118319797 
2311366149 
2311329195 
1878076905 
2311272207 
2311291481 
481595113 
2310300967 
2310309779 
2310359559 
2310319891 
2310331617 
2310357481 
2310443607 
2310379771 
2310397647 
2119040777 
597610255 
480237545 
3593101615 
1452647327 
2363171775 
2118288229 
2118197019 
2118167823 
2118393833 
2118244411 
2118246181 
2118207757 
2869692493 
3450316029 
3084903685 
870381405 
870390979 
1068029885 
2364227763 
2364463911 
3243049575 
3475913495 
3554843985 
3555053693 
869803839 
3084098963 
1067323283 
3592981953 
1875915989 
2117785709 
595732443 
2309001407 
2308996105 
2309009913 
2308828325 
2514739081 
3029708291 
1116136929 
1115827327 
2363710557 
2363740403 
2363658255 
2363651017 
2363988333 
2363800659 
2363465955 
872194743 
2171961441 
2171957369 
2171921733 
2171872703 
2172041545 
2171811293 
2171699117 
1069332759 
2363182849 
2363007105 
2363011989 
2747577173 
2171397923 
2171417923 
2171387999 
2171342865 
2171544003 
2171582867 
2171474043 
2912702671 
2362585283 
2362864347 
2362917809 
2572531239 
2572324363 
2572250745 
2572227251 
2572663915 
2572579881 
2572800491 
2572793201 
3247871225 
3248009673 
3662561933 
2751047157 
1070568847 
2750662935 
2750910669 
2916710765 
3088063697 
1070406041 
3087226287 
3087373137 
3477991519 
3604388157 
3660509923 
1069925165 
1070063851 
1007400751 
1936293297 
2175232087 
2365437119 
3086559243 
3086601781 
3086746215 
3086853823 
3086485575 
2169961175 
1006915829 
3086030433 
1005867105 
2171240519 
2171267585 
2171273839 
3553165325 
1005417151 
2170778821 
2170999833 
2171103971 
2171149057 
2171078273 
2362086779 
2571552711 
2571475659 
2572135723 
2572141583 
2746966719 
2746914705 
3371786395 
2170633545 
2170466095 
2170603647 
2170590195 
2170521945 
2170542961 
2170549825 
2170512049 ]' 
 , q'[WRK_ID
2170289321 
2170210965 
2170175521 
2571378867 
2571369769 
2911864535 
2911987501 
3551522865 
2746664761 
2570781623 
2570749077 
2571117277 
2571114843 
2570882035 
2571185529 
2570690547 
2169813013 
2169869087 
2169852577 
2170059687 
3781827083 
3981501737 
2169762053 
2169639163 
2169619519 
2169567133 
2169154699 
2169199151 
2169350285 
2169307117 
2169323911 
2169504485 
2169446331 
2169464961 
2169247811 
2570602753 
3080094639 
3551369475 
1362758679 
2570543525 
2570432123 
2169021979 
2168991803 
2168881367 
3659551543 
2570211711 
2570298877 
2570167991 
2570035627 
2168693685 
3239964043 
3370715915 
3659224053 
3659216245 
2569833213 
2569853717 
2569917115 
2569665103 
2569734227 
2569681955 
2359733815 
3735581921 
3822442383 
3836276091 
3891522501 
3954085389 
3957692973 
3965833063 
3969228281 
3977521257 
2697021005 
3988465785 
3991515049 
3994180215 
1468982129 
3079477719 
2746101643 
2746077671 
2569490005 
2569410731 
1360044285 
3822022787 
3822071145 
3821961365 
3835612627 
3870703693 
3891244553 
2569310933 
2569317481 
2569402193 
3601458807 
1278672723 
1278682607 
1278853695 
2569147613 
2569131863 
2568932521 
4174015079 
4173723597 
4174584051 
4175338207 
478781995 
2868673431 
2116799687 
2116784615 
2116213283 
2116263549 
2116239261 
2116439229 
2116435407 
2116451699 
2116312139 
2116529221 
2116528769 
2116379187 
2116379915 
2116385571 
2116382865 
2116163827 
2116185341 
2511688429 
3334048003 
2863733067 
2697020641 
2697322851 
3449071931 
1115289069 
2115718273 
2115752835 
2115757147 
2115946853 
2115948333 
2115912263 
2115785161 
2115808033 
2115837387 
2116000023 
2115978595 
2115997151 
2116026535 
2115887079 
2115891815 
2115696943 
549435085 
549435087 
3448959007 
4390918469 
2114954375 
2114836679 
2114766457 
2114733485 
3447966347 
3191174269 
3528140497 
1870668867 
2511070507 
2864617097 
2864524579 
3333165305 
3446844741 
2305214779 
2692340663 
493537065 
547981737 
2110901623 
501466049 
547740247 
588303963 
3189373863 
2863762275 
3524843969 
3524542747 
470414483 
2863672089 
2863366215 
2863096241 
2863004061 
2862742353 
2109423275 
3188864759 
3445523301 
3527075513 
1235427771 
545783967 
2108682841 
532470447 
613365011 
1866519525 
498934519 
3330865043 
2862078055 
2862196801 
613153047 
4389666129 
498364621 
2302674431 
2689046107 
2861761419 
2861826689 
2107448121 
530853669 
2302056729 
2302016049 
2302324197 
1864945301 
2107343107 
2107214695 
2107135343 
2107176977 
472448081 
496377291 
4389579119 
2300925079 
2861134381 
3186637821 
610228761 
3443284617 
2106611427 
2106381129 
2686728819 
471034125 
3329099407 
3328443951 
3020670905 
3522906437 
3522820717 
3522347749 
2679672321 
542886665 
2504010349 
4097408871 
4099475813 
2503780527 
4095138691 
541627887 
2684862459 
3184764421 
3184884273 
2858304891 
3021347233 
608653535 
4089188967 
2102679917 
608506547 
2102235303 
3182717497 
526980455 
4085566261 
487814153 
2100460001 
2100502687 
2100498967 
2100530661 
2100538619 
2100520447 
2100536739 
2680830839 
2680808397 
2680815069 
2681063993 
2680662961 
2680519891 
2680493181 
2680363585 
2680405695 
2680381111 
2679922115 
2679892401 
2679913463 
2679943105 
3521092831 
4078508721 
2677569383 
2679499191 
2679766713 
2679787535 
2679744051 
2679750711 
2679592825 
2679577147 
2679408569 
2679375729 
2679387275 
2679338605 
628542151 
3180692917 
3520828015 
2679307153 
4076888675 
2679043721 
2679035539 
2679163635 
3438096231 
1848685321 
2678560053 
2293945691 
2499104677 
2096813055 
4387143203 
4387468131 
1847239267 
1847284299 
511106349 
2293065455 
2293237311 
2293124735 
2292905755 
3436574725 ]' 
/* chunk 6 */ , q'[WRK_ID
3436643387 
4069124249 
1846377383 
2095063493 
2677846745 
2677945265 
2677814221 
2094614517 
2677607957 
2677601021 
2677710813 
2677707311 
608155639 
2677523797 
4066167509 
2677335299 
2677376827 
2677365903 
623562355 
4060797345 
4060921481 
4062366403 
4057752345 
4057535331 
4059653601 
4060472313 
469211627 
2093025015 
2677188005 
2677223847 
2677228681 
2677215483 
3516283171 
1843296823 
2677099205 
621951453 
505145879 
620838213 
504343819 
2290533041 
620312327 
642858643 
2676518763 
2676400785 
2676457321 
2676442845 
2676434395 
2676495793 
2676271709 
2676162061 
2091643125 
987103177 
2495542427 
2675878865 
2675801441 
2675868573 
2676071819 
2676106645 
2675504717 
2675686307 
2675689239 
607701619 
2669037537 
2675445031 
2675429441 
2849122533 
2675260813 
2675276919 
639894773 
639907369 
639791751 
2675204839 
2848762745 
2674016935 
2090055947 
2673839713 
2673790791 
2673762987 
2673627261 
2673618399 
2673751821 
2673590621 
2673570353 
2673580469 
2673423363 
2493186867 
2492696923 
2672298447 
2672308805 
2846707813 
2846824593 
2088980413 
2671645633 
2671011895 
635540265 
635525233 
635624349 
635640017 
3172598205 
467000555 
525127767 
2491600677 
2491468679 
2669696835 
2669573919 
2669576483 
2669602729 
1225789521 
2088280413 
2088305461 
2669016311 
2669042045 
3170097169 
2664351413 
1221715517 
2669394197 
2669442647 
3008244325 
2668830049 
2668856689 
3170690637 
4381854811 
1830044073 
2287647543 
2668709605 
2668695799 
2668741783 
2490330023 
2489892139 
978942103 
603134595 
4381233027 
466449651 
1824405155 
977714867 
2085978033 
2084947339 
2084529043 
2084422621 
2084399505 
4380115797 
2084019791 
3007102609 
2083678891 
1223647379 
1819679019 
2843088197 
2285102437 
2284934461 
973838561 
2082981467 
1818387825 
1818579295 
2284773019 
2082700325 
558611825 
2284135373 
2664398983 
3169724573 
2841013909 
3168794687 
2840535595 
3422647167 
2834452667 
3426869393 
4378232909 
2283248573 
2839254369 
1052681513 
1811630089 
3425252453 
1219558945 
3425213289 
2280598115 
2280512671 
2081119389 
2080915623 
1217218769 
967365849 
2080510277 
2080522201 
2080638117 
2080379863 
2279571551 
2080200617 
1216004637 
1216167265 
646653727 
2279173473 
3164359303 
646128447 
2659543331 
2836059649 
3164211787 
1215394679 
2835588791 
3163425929 
3163467915 
3163526735 
2278253235 
2278200637 
2658484615 
3162968931 
3163162637 
2277671297 
2079717379 
2079712815 
2079488017 
2079542035 
2079454623 
1214824567 
2079365443 
3420283989 
3420033137 
4552938941 
2079333527 
2078987951 
2078988429 
2079149823 
2079149945 
2079147395 
2078862171 
2078853977 
2078864267 
2078892739 
2078866693 
2079072135 
2079245333 
2079259771 
2079238481 
2079119459 
2079087819 
2079121531 
2079128185 
2078914733 
3161390597 
2657195981 
1451841597 
3419181307 
3161137965 
2077499841 
2077524437 
2077465337 
2275797909 
2077215155 
2274696577 
2274487541 
3418924533 
2076444985 
2471386193 
3159888107 
664090023 
2075908087 
2274225183 
2471124037 
2470035025 
2273134541 
2469471483 
3158756415 
4553167935 
4552669417 
4552690671 
2992364605 
2272816253 
4552432817 
2469189685 
1111100785 
4552193883 
4551483265 
4551771073 
4551855897 
4551756517 
4551752615 
4551751791 
2827234115 
4551124707 
4551210995 
4551233175 
4551346229 
4551151311 
714253799 
714164499 
2073972549 
1110557841 
4549600301 
2073682833 
2270967553 
2654255685 
1784731313 
2073091345 
4547367181 
2072521059 
2072275663 
2072284793 
2072308737 
712257487 
4546713713 
2072181807 
2072245871 
2072245893 
2467163131 
2824209233 
2824229569 
4545740235 
4545955027 
4546013833 
4545975425 
710959593 
711112135 ]' 
 , q'[WRK_ID
3156374729 
3417683647 
2991738695 
3152117413 
2652972507 
3417510741 
4542885167 
4542237745 
2652314679 
4540671121 
4541135487 
4541210517 
4541211349 
4541150061 
4373050513 
662480347 
2268530879 
3415866173 
708510649 
4538927603 
2267432989 
2267345807 
2462847045 
4537660157 
4538263561 
723310597 
4536835133 
4537592545 
4536630503 
4536773265 
4017951491 
4371818183 
2986250843 
659453141 
631951307 
632124453 
4372431159 
2985180009 
1776803027 
1776899611 
2265062937 
2647607619 
2264945125 
655960993 
2263477021 
2263681865 
1774752549 
2981542831 
705817615 
705587323 
2262877353 
2645373953 
2819714599 
2813858097 
2810965705 
2261812211 
651777049 
651273507 
2261346557 
2979981355 
3150419107 
2979010991 
703910355 
3149392683 
2642702411 
1768915757 
702199867 
2642333219 
701890155 
1209897151 
2977212967 
2815336263 
1767073379 
2641197367 
2449816225 
648011627 
4532291157 
667273273 
2058189629 
2639871223 
4530446877 
2057755131 
2057809083 
2974403725 
4528743847 
2255857577 
4527891999 
2255636041 
2973864695 
4526722841 
2057287487 
3411773739 
2056961857 
4524468741 
966904061 
966894909 
2811772061 
2811753981 
4523068935 
2811511029 
2972363849 
4522239219 
2810884567 
3140077269 
2806017839 
2633148485 
4521789929 
1446917877 
2444292849 
4519544079 
4517913715 
1761401505 
2252510213 
2809093689 
2808974193 
2808697539 
2970694809 
2808370479 
2808119407 
2969968087 
2969741669 
2969663679 
4511710259 
4513858425 
2969316103 
2250907975 
2250872373 
2968941755 
4508520839 
2634939827 
2968602243 
4506584507 
2250363619 
2250243589 
2634771861 
2805185851 
3138998999 
4504422303 
4504682759 
2438523531 
1754316601 
3138777807 
4502739547 
4501881261 
958350365 
3138694985 
4498621361 
4500250887 
2803438619 
2050402881 
2050503557 
2633490211 
2633120421 
4349209539 
4347784321 
4343108565 
1346110347 
4497585653 
4498274711 
2049868141 
728325769 
2437527227 
2632822719 
2632773897 
2248570227 
2248651491 
2632351303 
955875161 
956131463 
956122059 
4492604851 
1750495535 
955375501 
954511151 
4488397043 
4488605347 
4488602523 
954393273 
2247377567 
2436455767 
2048213701 
2048285639 
726215043 
1748992527 
2435917067 
2632250987 
4349112417 
953577593 
2247071411 
4347367059 
4347488927 
4347845263 
4348421961 
4349044547 
4345643371 
2632186969 
4345007017 
4345007035 
1348014037 
4344423283 
4343802963 
4343683779 
4343296689 
4352010219 
4350771067 
4331423153 
1734797465 
4033756461 
1346271511 
1346128871 
4354567713 
4355018749 
4355082811 
1011322089 
4353844295 
4353213035 
4352975177 
4352944577 
743499215 
2433093423 
4351841313 
4351585183 
4350381475 
4350049333 
4350222413 
4350921435 
4351255591 
4350991155 
4351134833 
1009859347 
945285115 
2043307447 
2243194161 
4293684893 
4293391697 
4293277055 
4292705171 
4294352041 
4290905973 
4291559767 
4292559179 
4291732507 
2042452413 
2243025881 
4039439459 
4038485037 
4289837125 
739202099 
739073471 
1342010093 
2039870189 
4041625721 
4033727565 
4026805347 
4043439783 
2801457997 
4052043461 
4025832215 
4024068425 
4172188105 
4172568673 
4171161061 
4171883541 
4173273323 
4173467111 
4173549045 
4173423109 
4173025311 
4169120661 
4170571099 
4167844211 
4577473807 
4578371617 
4578890329 
4579436949 
4576167331 
4570222277 
4572027343 
4569657965 
3888363201 
3888444443 
3886757323 
3885648221 
4137161671 
4136626421 
2037265143 
2630382129 
2630543377 
2629755763 
2239242001 
2430870855 
2802524571 
2965040933 
3137810975 
3137838169 
4021676371 
2964274255 
3137679795 
3137788089 
4138774601 
4138452013 
4138216593 
2035403029 
2429981461 
4175563449 
2801741689 
2801578279 
2801304617 
2237987633 ]' 
 , q'[WRK_ID
2429661069 
2628731785 
2800760123 
2801147045 
2800848359 
2962969395 
2963214425 
2962769035 
2800247683 
2800271339 
3137327941 
3137190425 
1338553515 
2799917167 
2800048839 
1186255227 
1186193325 
1434023939 
2236675595 
2799000549 
2799152839 
2799403291 
1335765173 
1335521345 
790105411 
2234065661 
754283281 
789013281 
2233144947 
788295153 
2232894329 
1428549543 
1699982617 
1332654925 
1332212811 
4176551769 
4176579597 
1699107905 
2230252097 
2230135495 
2228654395 
1323432443 
4555233673 
1322861101 
4267885961 
4215127991 
4175663863 
2227631275 
2227673865 
2226578399 
2226821527 
769297103 
1009091413 
2014604643 
781759389 
781817913 
781036627 
1415125609 
1316758399 
4247794761 
4247912819 
4245517675 
4246819935 
4243612033 
4243865967 
1185364755 
802523055 
4239579185 
4237601283 
4237535389 
4232978341 
4233997863 
4235246285 
4235628903 
799767215 
1314815825 
4328603649 
4328117783 
4227464435 
4326180715 
1182449347 
4224702789 
1674260087 
4221966517 
4220371919 
4221398685 
2007923261 
4218693855 
4219802537 
2007374367 
4216644625 
4217966031 
2007056777 
4215407531 
4190664855 
1179079009 
4212764905 
4214856579 
4314099931 
4211877395 
4212212375 
4213171681 
4213199071 
4311770265 
4312031099 
4209454267 
4209612227 
2223545665 
4206061917 
4206917259 
4207297053 
4207382445 
2223450427 
4204863071 
938748937 
1660627055 
4203195599 
4202927313 
937977229 
1660134995 
1660011973 
1659110707 
2222480993 
4200393187 
4201995885 
937232347 
2222077553 
2222027913 
1178590405 
4198395355 
4197730037 
4198589819 
936716725 
1655813315 
1656254993 
1040885913 
2221444025 
4194842975 
4193562585 
811643127 
934875639 
1039875143 
1040057673 
4189805291 
928653077 
3135574715 
4190980681 
4188511623 
1039758287 
4186771801 
4188281889 
1038682289 
4183525893 
4184716131 
931865591 
1038470341 
4181516927 
4182449621 
4179169989 
4179150549 
930001573 
929886547 
1646104019 
1645625713 
1645718601 
1645256075 
1644537705 
1643872645 
1176606475 
1035440727 
2220436981 
2798501787 
2798415631 
2798668461 
2798683707 
2798748077 
2798824849 
2798222137 
2961195347 
3136738083 
3136806653 
2219876085 
2220048673 
2797988685 
2797513841 
2960717297 
2960925953 
3511744731 
1641573987 
2422674365 
2422991321 
2796720995 
2796664619 
3135727141 
3507893045 
3507953515 
833841377 
833992109 
1108877949 
3135239997 
3135006039 
1640574873 
1640082775 
2795778321 
3408488873 
1406294283 
2795462567 
2795433265 
2795168913 
1405727597 
2217972971 
2217837105 
2794936199 
2958529753 
3134106999 
2420119035 
2958406423 
2958419733 
1639352855 
1639265929 
2419395763 
2793588873 
2793628499 
2793337469 
2958335251 
1404616863 
1637744181 
1637505055 
1403194519 
1637260503 
2215802175 
2619030321 
2956612987 
1207969191 
834926881 
1171330141 
2618550873 
2956037809 
1635607915 
2955987289 
2955747109 
1028332803 
2955161237 
2955186969 
1108877951 
831321045 
915644185 
825317189 
1398572765 
1398063573 
1631373955 
1107517127 
1630816667 
2412209315 
2616510899 
1106124737 
822157559 
822184679 
822116591 
822250823 
822259701 
2953164989 
1629293065 
1986847897 
1104656755 
820505523 
2952719749 
849111789 
2614901683 
2952496659 
2409451147 
2409477175 
3579660927 
2787011281 
3579550569 
847359703 
2951724179 
3578972349 
3578806803 
2612687167 
2951054689 
2612483927 
2784767429 
845942095 
1981346633 
2207518851 
2611486059 
3126474243 
1980971471 
2611389945 
2783669745 
3504465261 
3504412279 
916039051 
3278559187 
910814525 
1972427497 
2399695813 
2207102731 
915071367 
2206521555 
3278104385 
1622737611 
1622604083 
881738885 
2405065741 
2405076909 
2405087731 
2405067441 ]' 
 , q'[WRK_ID
3124114041 
926335011 
3399113997 
881373287 
2404208851 
2609698241 
2609517707 
2404108483 
2404027815 
925615703 
3503924695 
3398928757 
1977363763 
912811209 
3503493963 
1618758495 
912088941 
2204458261 
2607637533 
2607773583 
2203624047 
877844859 
2401343353 
2401292865 
2401285879 
2780264599 
922740395 
1974332579 
1974358103 
2202715807 
2400613145 
922168035 
3120266717 
2400225515 
907563115 
901846293 
1383540327 
921072705 
1613189917 
907078981 
2202146587 
2399673579 
3118878367 
1612786381 
1612531011 
906398371 
1972177497 
919464263 
919645615 
2604225483 
1971083691 
1304965101 
2603927675 
918451619 
3273835195 
904106355 
1970295795 
918249807 
2200820229 
2201153635 
903537557 
1969609473 
916944295 
1608407803 
916811425 
2601945915 
1967808399 
891184231 
891154165 
890236285 
2943000175 
2942575933 
899797517 
2942368955 
888165137 ]' 
);





 PROCEDURE info( p_context VARCHAR2
  , p_text VARCHAR2 
 )
 AS
 BEGIN 
  dbms_output.put_line( p_context||': '||p_text );
 END info
 ;

 PROCEDURE debug( p_context VARCHAR2
  , p_text VARCHAR2 
 )
 AS
 BEGIN 
  null; -- dbms_output.put_line( p_context||': '||p_text );
 END debug
 ;
 PROCEDURE gp_set_num_chars_with_backup -- forward declaration
  (  p_new_decimal_point VARCHAR2
   , po_old_value OUT VARCHAR2 ) 
  ;
 PROCEDURE gp_create_target_table -- forward declaration
( p_target_schema VARCHAR2
, p_table_name  VARCHAR2
, ptab_col_name dbms_sql.varchar2a
, p_create_column_length VARCHAR2
)
  ; 
PROCEDURE gp_compose_insert_stmt -- forward declaration
( p_target_schema VARCHAR2
, p_table_name  VARCHAR2
, ptab_col_name dbms_sql.varchar2a
, po_sql_text OUT VARCHAR2
);
PROCEDURE gp_set_date_format_with_backup-- forward declaration
( p_new_value VARCHAR2
  ,po_old_value OUT VARCHAR2
);

PROCEDURE gp_insert_row -- forward declaration
( p_prepared_cursor INTEGER
 ,p_decimal_point_char VARCHAR2
 ,ptab_col_name  dbms_sql.varchar2a
 ,ptab_col_val  dbms_sql.varchar2a
 ,pmap_col_data_type t_column_dtype_map
 ,p_line_no_dbx INTEGER 
) ;
FUNCTION ident_is_normalizable ( pi_ident VARCHAR2 ) -- forward declaration
RETURN NUMBER ;
 
PROCEDURE   gp_transform_idents ( -- forward declaration
  ptab_ident_in DBMS_SQL.varchar2a
 ,potab_ident OUT DBMS_SQL.varchar2a
) ;

/**************************************************************/
   FUNCTION get_column_dtype_map (
      ptab_column                              dbms_sql.varchar2a
      ,p_table varchar2
      ,p_schema varchar2
      )
      RETURN t_column_dtype_map
   /**************************************************************/
   ; -- forward declaration
/**************************************************************/
   function quote_str( 
	p_inp varchar2
	,p_quote_char varchar2 default '"'
   ) 
   return varchar2
   /**************************************************************/
   as
   begin return p_quote_char||p_inp||p_quote_char;
   end quote_str;

   /**************************************************************/
   FUNCTION get_all_columns (
      p_line                              VARCHAR2
	  )
      RETURN DBMS_SQL.varchar2a 
   /**************************************************************/
      AS
	  lc_cntxt constant varchar2(61) := gc_pkg_name||'.get_all_columns';
      l_sep_pos     INTEGER;
      l_line_len    INTEGER            := LENGTH (p_line);
      l_scan_pos    INTEGER            := 1;
      l_column      LONG;
      ltab_column   DBMS_SQL.varchar2a;
      lc_col_sep_len CONSTANT INTEGER := LENGTH( g_col_sep );
   BEGIN
      debug($$plsql_line, 'l_line_len: '||l_line_len||' First 10 chars: '||substr(p_line, 1,10) );
      WHILE l_scan_pos < l_line_len LOOP
         l_sep_pos := INSTR (p_line, g_col_sep, l_scan_pos);
         debug( $$plsql_line, ' l_scan_pos: '||to_char(l_scan_pos) ||' l_sep_pos: '||to_char(l_sep_pos) );
         l_column :=
            CASE
               WHEN l_sep_pos > 0 THEN substr/*c*/ (p_line, l_scan_pos, l_sep_pos - l_scan_pos)
               ELSE substr/*c*/ (p_line, l_scan_pos)
            END;
         ltab_column (ltab_column.COUNT + 1) := l_column;
         debug( $$plsql_line, ' l_column=' || substr(l_column, 1, 30)||case when length(l_column) > 30 then '..' end  );
         l_scan_pos := l_scan_pos + 
            case when l_column is not null then length/*c*/ (l_column) else 0 end
            + lc_col_sep_len;
         debug( $$plsql_line, ' l_scan_pos: '||l_scan_pos);
      END LOOP;
		debug( $$plsql_line, 'returning ltab_column.count: '||ltab_column.count);

      RETURN ltab_column;
EXCEPTION
   WHEN OTHERS THEN
    -- pck_std_log.err( a_errno=> sqlcode, a_text=> dbms_utility.format_error_backtrace);
      raise;
   END get_all_columns;

   /**************************************************************/
   FUNCTION get_column_dtype_map (
      ptab_column                              dbms_sql.varchar2a
      ,p_table varchar2
      ,p_schema varchar2
      )
      RETURN t_column_dtype_map
   /**************************************************************/
      AS
	  lc_cntxt constant varchar2(61) := gc_pkg_name||'.get_column_dtype_map';
      ltab_return t_column_dtype_map;
      l_column VARCHAR2(100);
  begin
    debug( $$plsql_line, 'p_table:'||p_table );
    for i in 1 .. ptab_column.count loop
       l_column := ptab_column(i);
       debug( $$plsql_line,'l_column:'||l_column );

       select data_type into ltab_return( ptab_column (i) )
       from all_tab_columns
       where table_name = p_table
         and owner = p_schema
         and column_name = l_column
         ;
    end loop; -- over ptab_column
    return ltab_return;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR( -20000, 'Could not determine data type for '||l_column );
   WHEN OTHERS THEN
	 -- pck_std_log.err( a_errno=> sqlcode, a_text=> dbms_utility.format_error_backtrace);
      raise;
   end get_column_dtype_map;
   
/**************************************************************/
PROCEDURE insert2table (
   p_csv_string                        VARCHAR2
 , p_target_object                     VARCHAR2
 , p_target_schema                     VARCHAR2 DEFAULT user
 , p_delete_before_insert2table              BOOLEAN DEFAULT TRUE
 , p_col_sep varchar2 default ';' 
 , p_decimal_point_char varchar2 default '.'
 , p_date_format varchar2 default 'dd.mm.yyyy'
 , p_create_table boolean default false
 , p_create_column_length integer default 100
 , p_standalone_head_line varchar2 default null
)
--
AS
   /**************************************************************/
	  lc_procname constant varchar2(61) :='insert2table';
	  lc_cntxt constant varchar2(61) := gc_pkg_name||'.'||lc_procname;
  lmap_column_dtype t_column_dtype_map;
   l_scan_pos                 PLS_INTEGER        := 1;
   l_line_no                  INTEGER            := 0;
   l_line                     LONG;
   l_tot_len                  INTEGER;
   l_ins_cnt                  INTEGER := 0;
   ltab_col_nam_input         DBMS_SQL.varchar2a;
   ltab_col_nam_used          DBMS_SQL.varchar2a;
   ltab_col_val               DBMS_SQL.varchar2a;
   l_insert2table_stmt              LONG;
   l_cur                      INTEGER            := DBMS_SQL.open_cursor;
   l_stat                     INTEGER;
   l_nls_sess_num_chars varchar2(100);
   l_nls_sess_date_format varchar2(100);
   l_num_bind number;
   l_sql long;

   /**************************************************************/
   procedure i$reset_line_cur
   /**************************************************************/
      AS
	begin
		l_scan_pos    := 1;
		l_line_no     := 0;
   end i$reset_line_cur;
   
   /**************************************************************/
   FUNCTION i$get_next_line
      RETURN VARCHAR2 
   /**************************************************************/
      AS
      l_eol_pos   PLS_INTEGER;
      l_skip      PLS_INTEGER := 0;
      l_line      LONG;
   BEGIN
      l_eol_pos := instrc (p_csv_string, gc_dos_eol, l_scan_pos);
	  
      IF l_eol_pos > 0 THEN
         l_skip := gc_dos_eol_len;
      ELSE
         l_eol_pos := instrc (p_csv_string, gc_unix_eol, l_scan_pos);

         IF l_eol_pos > 0 THEN
            l_skip := gc_unix_eol_len;
         END IF;   -- found Unix style
      END IF;   -- found DOS style

      l_line :=
         CASE
            WHEN l_eol_pos > 0 THEN substr/*c*/ (p_csv_string, l_scan_pos, l_eol_pos - l_scan_pos)
            ELSE substr/*c*/ (p_csv_string, l_scan_pos)
         END;
      l_scan_pos := l_scan_pos + length/*c*/ (l_line) + l_skip;
      debug( $$plsql_line, 'eol_pos=' || l_eol_pos || ' skip=' || l_skip || ' scan_pos=' || l_scan_pos);
      RETURN l_line;
   END i$get_next_line;

   
BEGIN
   -- termination criteria for loop over lines in CSV string
   l_tot_len := length/*c*/ (p_csv_string);

   debug( $$plsql_line,'l_tot_len ='||l_tot_len
		||' p_standalone_head_line ='||p_standalone_head_line
   );
   --
   g_col_sep                         := p_col_sep; 
   i$reset_line_cur;
   -- get the column names from the first line
	if p_standalone_head_line is null then
		l_line := i$get_next_line;
		if length(l_line) = 1 or l_line is null  then
			raise_application_error(-20000, 'the first line of the CSV text appears to be empty!');
		end if; -- header line empty
		ltab_col_nam_input := get_all_columns (l_line);
	else
		ltab_col_nam_input := get_all_columns (p_standalone_head_line);
	end if; -- check p_standalone_head_line
   debug( $$plsql_line,'Col count: ' || ltab_col_nam_input.COUNT);
   
  gp_transform_idents ( ptab_ident_in => ltab_col_nam_input, potab_ident => ltab_col_nam_used );
   /* Create target table if applicable
   */
  if p_create_table then
    gp_create_target_table( p_target_schema=> p_target_schema, p_table_name => upper(p_target_object)
      , ptab_col_name => ltab_col_nam_used 
      , p_create_column_length=> p_create_column_length
    );
   end if; -- p_create_table
   
   -- set up dynamic insert2table statement
   gp_compose_insert_stmt( p_target_schema => p_target_schema
    , p_table_name  => upper(p_target_object)
    , ptab_col_name => ltab_col_nam_used 
    , po_sql_text => l_insert2table_stmt
    );
    BEGIN
      DBMS_SQL.parse (l_cur, l_insert2table_stmt, DBMS_SQL.native);
   EXCEPTION
      WHEN OTHERS THEN
         info ($$plsql_line, SUBSTR ('Error on parse: ' || l_insert2table_stmt, 1, 500));
         RAISE;
   END parse_sql;
   lmap_column_dtype := get_column_dtype_map(p_schema=> p_target_schema,
    p_table => upper(p_target_object) , ptab_column => ltab_col_nam_used 
    );

  gp_set_num_chars_with_backup( p_new_decimal_point=> p_decimal_point_char, po_old_value => l_nls_sess_num_chars );
  gp_set_date_format_with_backup( p_new_value => p_date_format, po_old_value=> l_nls_sess_date_format );

  
   IF p_delete_before_insert2table THEN
		l_sql := 'delete ' || CASE WHEN p_target_schema IS NOT NULL THEN p_target_schema || '.'
                        END || upper(p_target_object);
		info($$plsql_line, l_sql);
      EXECUTE IMMEDIATE l_sql;
   END IF;   -- check delete flag


   -- Process lines containing the column values
   WHILE l_scan_pos < l_tot_len
                                   --
                               --    AND l_line_no < 10   -- test only
   LOOP
      l_line := i$get_next_line;
      l_line_no := l_line_no + 1;

      debug( $$plsql_line, 'line ' || l_line_no || ' starts with: ' || SUBSTR (l_line, 1, 30));
 
      IF l_line IS NOT NULL THEN
        ltab_col_val := get_all_columns (l_line);
        gp_insert_row ( p_prepared_cursor => l_cur
         ,p_decimal_point_char => p_decimal_point_char
         ,ptab_col_name  => ltab_col_nam_used    ,ptab_col_val  => ltab_col_val
         ,pmap_col_data_type => lmap_column_dtype, p_line_no_dbx => l_line_no
         ) ;
                 
       l_ins_cnt := l_ins_cnt + 1;
      END IF;   -- line not empty

   END LOOP;   -- over CSV string
   info( $$plsql_line, 'Value rows parsed: ' || l_line_no ||' insert2tableed: '||l_ins_cnt);

   COMMIT;
   /* restore nls setting 
   */
   execute immediate 'alter session set NLS_NUMERIC_CHARACTERS = '''
	||l_nls_sess_num_chars
	||''''
	;
   execute immediate 'alter session set NLS_DATE_FORMAT = '''
	||l_nls_sess_date_format
	||''''
	;
EXCEPTION
   WHEN OTHERS THEN
      -- pck_std_log.err( a_errno=>sqlcode, a_text=> dbms_utility.format_error_backtrace );
      ROLLBACK;
      raise;
END insert2table;

FUNCTION gen_update_for_unquoting( 
   p_target_object       VARCHAR2
 , p_target_column       VARCHAR2
 , p_target_schema       VARCHAR2 DEFAULT user
) RETURN VARCHAR2 
AS
   l_prolog VARCHAR2(1000);
   l_stmt VARCHAR2(1000);
BEGIN
   l_prolog :=
    'UPDATE '||p_target_schema||'.'||p_target_object||CHR(10)
   ||' SET '||p_target_column||' = '
   ;
   l_stmt := 
   l_prolog
   || q'[ REPLACE ( <column>, '""', '"' ) ]' ||CHR(10)
   || q'[ WHERE <column> LIKE '%""%' ; ]'||CHR(10)
   ||l_prolog
   || q'[ SUBSTR(<column>, 2 ) ]'||CHR(10)
   || q'[ WHERE <column> LIKE '"%'; ]'||CHR(10)
   ||l_prolog
   || q'[ SUBSTR(<column>, 1, LENGTH( <column> ) - 1 ) ]'||CHR(10)
   || q'[ WHERE SUBSTR( <column>, -1 ) =  '"'; ]'||CHR(10)
   ;
   RETURN REPLACE(l_stmt, '<column>', p_target_column );
END gen_update_for_unquoting;

/**************************************************************/

FUNCTION get_ext_table_ddl (
   p_header_line varchar2 
 , p_target_object     VARCHAR2 DEFAULT NULL
 , p_file_name         VARCHAR2 DEFAULT NULL
 , p_ora_directory     VARCHAR2 DEFAULT NULL
 , p_col_sep varchar2 default ';' 
 , p_rec_sep varchar2 default CHR(10) 
 , p_create_column_length integer default 1000
)
RETURN VARCHAR2
--
AS
  lc_procname constant varchar2(61) :='get_ext_table_ddl';
  lc_cntxt constant varchar2(61) := gc_pkg_name||'.'||lc_procname;
   ltab_col_nam               DBMS_SQL.varchar2a;
   l_column_list_source VARCHAR2(4000 CHAR);
   l_column_list_target VARCHAR2(4000 CHAR);
   l_rec_sep_code INTEGER;
   l_ddl_template CONSTANT VARCHAR2(32000 CHAR) := 
q'{CREATE TABLE <table_name> ( 
   <column_list_target>
)
ORGANIZATION EXTERNAL (
  TYPE ORACLE_LOADER
  DEFAULT DIRECTORY <directory>
  ACCESS PARAMETERS (
    RECORDS DELIMITED BY <rec_sep>
    FIELDS TERMINATED BY <col_sep> OPTIONALLY ENCLOSED BY '"'
      ( <column_list_source>
      )
    )
    LOCATION (
      <file_name>
    )
)
}';
   l_ddl VARCHAR2(32000 CHAR);
BEGIN 
   g_col_sep  := p_col_sep;   
	ltab_col_nam := get_all_columns (p_header_line);
	for i in 1 .. ltab_col_nam.count loop
      dbms_output.put_line( 'line '||$$plsql_line||' i:'||i );
      IF i > 1 THEN
         l_column_list_target := l_column_list_target ||', ';
         l_column_list_source := l_column_list_source ||', ';
         dbms_output.put_line( 'line '||$$plsql_line||' i:'||i ||' l_column_list_target:'||l_column_list_target );
      END IF;
		l_column_list_source:= l_column_list_source||quote_str( ltab_col_nam(i) )||' CHAR('||p_create_column_length||')';
		l_column_list_target:= l_column_list_target||quote_str( ltab_col_nam(i) )||' VARCHAR2('||p_create_column_length||')';
	end loop; -- over column names
   l_ddl := REPLACE( l_ddl_template, '<table_name>', p_target_object );
   --
   l_ddl := REPLACE( l_ddl, '<col_sep>', quote_str( p_col_sep, '''' ) );
   l_ddl := REPLACE( l_ddl, '<column_list_source>', l_column_list_source );
   l_ddl := REPLACE( l_ddl, '<column_list_target>', l_column_list_target );
   --
   IF LENGTH( p_rec_sep ) > 1 OR LENGTH( p_rec_sep ) IS NULL THEN
      RAISE_APPLICATION_ERROR( -20001, 'Currently we only support record separator with length of 1 character!' );
   END IF;
   l_rec_sep_code := ASCII( SUBSTR(p_rec_sep, 1, 1))
   ;
   l_ddl := REPLACE( l_ddl, '<rec_sep>', '0x'||quote_str( l_rec_sep_code, '''' ) );
   IF p_ora_directory IS NOT NULL THEN
      l_ddl := REPLACE( l_ddl, '<file_name>', quote_str( p_file_name, '''' ) );
   END IF;
   IF p_file_name IS NOT NULL THEN
      l_ddl := REPLACE( l_ddl, '<directory>', p_ora_directory );
   END IF;
   RETURN l_ddl;
END get_ext_table_ddl;


  /**************************************************************/
PROCEDURE insert2table_from_file (
   p_file                              VARCHAR2
 , p_directory                         VARCHAR2
 , p_target_object                     VARCHAR2
 , p_target_schema                     VARCHAR2 DEFAULT user
 , p_delete_before_insert2table              BOOLEAN DEFAULT TRUE
 , p_col_sep varchar2 default ';' 
 , p_decimal_point_char varchar2 default '.'
 , p_date_format varchar2 default 'dd.mm.yyyy'
 , p_create_table boolean default false
 , p_create_column_length integer default 100
 , p_standalone_head_line varchar2 default null
 , p_max_records_expected NUMBER default 10000
)
--
AS
   /**************************************************************/
-- Setup to  be done by DBA: 
--create directory csv_util_load_dir as '/oradata/csv_util_load';
--grant read on directory csv_util_load_dir to service;
-- test: exec Pkg_utl_csv.insert2table_from_file( 'test.txt', 'CSV_UTIL_LOAD_DIR',  'no such table' );

  c_cntxt CONSTANT VARCHAR2(100 CHAR) := gc_pkg_name||'.insert2table_from_file';
  c_32k_minus_1 CONSTANT INTEGER := 32767;
  v_fh UTL_FILE.FILE_TYPE;
  v_buf  VARCHAR2(32767 CHAR);
  v_buf_converted  VARCHAR2(32767 CHAR);
  v_ln_cnt NUMBER := 0;
  v_countdown NUMBER := COALESCE( p_max_records_expected, 10000 );

  vtab_col_name              DBMS_SQL.varchar2a;
  vtab_col_val               DBMS_SQL.varchar2a;
  v_insert2table_stmt              LONG;
  v_nls_sess_num_chars varchar2(100);
  v_nls_sess_date_format varchar2(100);
  v_num_bind number;
  v_delete_stmt long;
  v_prepared_cursor INTEGER;
  vmap_column_dtype t_column_dtype_map;
  v_do_conversion BOOLEAN;
BEGIN
	info( $$plsql_line, 'file:'||p_file||' p_directory:'||p_directory );
  v_fh:= UTL_FILE.FOPEN( location=>p_directory, filename=> p_file, open_mode=> 'R', max_linesize => c_32k_minus_1
    );
  g_col_sep  := p_col_sep;   
  
  WHILE v_countdown >= 0 
  LOOP 
    BEGIN 
      UTL_FILE.GET_LINE(v_fh, v_buf);
      v_ln_cnt := v_ln_cnt + 1;
      debug( $$plsql_line, 'input line '||v_ln_cnt||' len:'|| lengthc( v_buf)||' start with: '||substrc( v_buf, 1, 20) );
      IF v_do_conversion IS NULL AND v_ln_cnt <= 3 THEN
        v_buf_converted := replace( v_buf, chr(0) );
        IF length( v_buf ) > length( v_buf_converted ) THEN
          v_do_conversion := TRUE;
          info( $$plsql_line, 'Input data contains null bytes. will will always do conversion ');
        END IF;
      END IF;
      IF v_do_conversion THEN 
        v_buf := replace( v_buf, chr(0) );
      END IF;
    EXCEPTION
      WHEN no_data_found THEN 
        info($$plsql_line, 'No more lines found after '||v_ln_cnt||' records');
        v_countdown := 0; 
    END;

	IF substr( v_buf, -1 ) = chr(13) THEN 
		v_buf := substr( v_buf, 1, length( v_buf ) - 1 );
	END IF;

	IF substr( v_buf, -1 ) = chr(13) THEN 
		RAISE_APPLICATION_ERROR( -20001, 'Found character '|| ascii( substr( v_buf, -1 ) ) ||' at end of line '||v_ln_cnt ||'!' );
	END IF;

IF vtab_col_name.COUNT = 0 THEN 
      if p_standalone_head_line is null then
        if length(v_buf) = 1 or v_buf is null  then
          raise_application_error(-20000, 'the first line of the CSV text appears to be empty!');
        end if; -- header line empty
        vtab_col_name := get_all_columns (v_buf);
      else
        vtab_col_name := get_all_columns (p_standalone_head_line);
      end if; -- check p_standalone_head_line
      info( $$plsql_line, 'Col count: ' || vtab_col_name.COUNT);

       /* Create target table if applicable
       */
      if p_create_table then
        gp_create_target_table( p_target_schema=> p_target_schema, p_table_name => upper(p_target_object)
          , ptab_col_name => vtab_col_name
          , p_create_column_length=> p_create_column_length
        );
      end if; -- p_create_table
      
      gp_compose_insert_stmt( p_target_schema => p_target_schema
      , p_table_name  => upper(p_target_object)
      , ptab_col_name => vtab_col_name
      , po_sql_text => v_insert2table_stmt
      );
          
      BEGIN
        v_prepared_cursor := dbms_sql.open_cursor;
        DBMS_SQL.parse (v_prepared_cursor, v_insert2table_stmt, DBMS_SQL.native);
      EXCEPTION
        WHEN OTHERS THEN
           info( $$plsql_line, SUBSTR ('Error on parse: ' || v_insert2table_stmt, 1, 500));
           RAISE;
      END parse_sql;
        vmap_column_dtype := get_column_dtype_map(p_schema=> p_target_schema,
          p_table => upper(p_target_object) , ptab_column => vtab_col_name
        );

      gp_set_num_chars_with_backup( p_new_decimal_point=> p_decimal_point_char, po_old_value => v_nls_sess_num_chars );
      gp_set_date_format_with_backup( p_new_value=> p_date_format, po_old_value=> v_nls_sess_date_format );
      
      IF p_delete_before_insert2table THEN
        v_delete_stmt := 'delete ' || CASE WHEN p_target_schema IS NOT NULL THEN p_target_schema || '.'
                            END || upper(p_target_object);
        info( $$plsql_line, v_delete_stmt);
        EXECUTE IMMEDIATE v_delete_stmt;
      END IF;   -- check delete flag

    ELSE -- cursor init stuff should have been done
       
      IF v_buf IS NOT NULL THEN
          vtab_col_val := get_all_columns (v_buf);
          gp_insert_row ( p_prepared_cursor => v_prepared_cursor
           ,p_decimal_point_char => p_decimal_point_char
           ,ptab_col_name  => vtab_col_name         ,ptab_col_val  => vtab_col_val
           ,pmap_col_data_type => vmap_column_dtype, p_line_no_dbx => v_ln_cnt
           ) ;
      END IF; -- 
    END IF; -- check column names are known
    v_countdown := v_countdown - 1;
    --dbms_output.put_line(v_buf);
  END LOOP; -- over lines 
  UTL_FILE.FCLOSE( v_fh );
  info( $$plsql_line, 'Lines found '||v_ln_cnt );
  
   /* restore nls setting 
   */
   execute immediate 'alter session set NLS_NUMERIC_CHARACTERS = '''
	||v_nls_sess_num_chars
	||''''
	;
   execute immediate 'alter session set NLS_DATE_FORMAT = '''
	||v_nls_sess_date_format
	||''''
	;

EXCEPTION  
  WHEN OTHERS THEN 
    info( $$plsql_line, dbms_utility.format_error_backtrace);
    IF utl_file.is_open( v_fh ) THEN 
      utl_file.fclose( v_fh );
    END IF;
    raise;
    
END insert2table_from_file;
  
PROCEDURE gp_set_num_chars_with_backup
  (  p_new_decimal_point VARCHAR2
   , po_old_value OUT VARCHAR2 )
AS
BEGIN
     /* save current numeric_chars setting before changing them
      */
    select value into po_old_value
    from nls_session_parameters
    where parameter = 'NLS_NUMERIC_CHARACTERS'
    ;
     execute immediate 'alter session set NLS_NUMERIC_CHARACTERS = '''
    ||case when p_new_decimal_point = ',' then ',.' else '.,' end
    ||''''
    ;
END gp_set_num_chars_with_backup;

PROCEDURE gp_create_target_table
( p_target_schema VARCHAR2
, p_table_name  VARCHAR2
, ptab_col_name dbms_sql.varchar2a
, p_create_column_length VARCHAR2
) AS
   l_create_tab_stmt long;
BEGIN
		for i in 1 .. ptab_col_name.count loop
			l_create_tab_stmt := 
			case
				when i = 1 then 'create table '||p_target_schema||'.'||p_table_name||'('
				else l_create_tab_stmt||','
			end ||gc_nl
			||ptab_col_name(i)||' varchar2('||p_create_column_length||')'
			;
		end loop; -- over column names
		-- finalize column list
		l_create_tab_stmt := l_create_tab_stmt||')';
		begin
			info( $$plsql_line, 'creating target table with stmt: '||l_create_tab_stmt );
			execute immediate l_create_tab_stmt;
		exception
			when others then
				info( $$plsql_line,'DDL stmt was: '|| l_create_tab_stmt);
				raise;
		end create_table;
END gp_create_target_table; 

PROCEDURE gp_compose_insert_stmt
( p_target_schema VARCHAR2
, p_table_name  VARCHAR2
, ptab_col_name dbms_sql.varchar2a
, po_sql_text OUT VARCHAR2
) AS
BEGIN
   po_sql_text :=
          'insert into ' || CASE
             WHEN p_target_schema IS NOT NULL THEN p_target_schema || '.'
          END || p_table_name|| '(';

   FOR i IN 1 .. ptab_col_name.COUNT LOOP
      po_sql_text := po_sql_text || CASE
                          WHEN i > 1 THEN ','
                       END || quote_str(ptab_col_name (i));
   END LOOP;   -- over column names

   po_sql_text := po_sql_text || ') values (';

   FOR i IN 1 .. ptab_col_name.COUNT LOOP
      po_sql_text := po_sql_text || CASE
                          WHEN i > 1 THEN ', '
                       END || ':B' || TO_CHAR (i);
   END LOOP;   -- over declaration of bind variables

   po_sql_text := po_sql_text || ')';
END gp_compose_insert_stmt;


PROCEDURE gp_set_date_format_with_backup
( p_new_value VARCHAR2
  ,po_old_value OUT VARCHAR2
) AS
BEGIN
	select value into po_old_value
	from nls_session_parameters
	where parameter = 'NLS_DATE_FORMAT'
	;
   execute immediate 'alter session set NLS_DATE_FORMAT = '''
	||p_new_value
	||''''
	;
END gp_set_date_format_with_backup;

      
PROCEDURE gp_insert_row 
( p_prepared_cursor INTEGER
 ,p_decimal_point_char VARCHAR2
 ,ptab_col_name  dbms_sql.varchar2a
 ,ptab_col_val  dbms_sql.varchar2a
 ,pmap_col_data_type t_column_dtype_map
 ,p_line_no_dbx INTEGER 
) AS
  l_exec_status NUMBER;
BEGIN
         -- bind column values that are specified in the CSV line (it can be null!)
         FOR i IN 1 .. ptab_col_val.COUNT LOOP
            EXIT WHEN i > ptab_col_name.COUNT;

            BEGIN
               debug ($$plsql_ine, SUBSTR ('co1 value: ' || ptab_col_val (i), 1, 255) );
               DBMS_SQL.bind_variable (c =>          p_prepared_cursor, NAME => ':B' || TO_CHAR (i), VALUE => 
                -- for numeric columns, we need to eliminate numeric group separators
                case when pmap_col_data_type( ptab_col_name(i) ) = 'NUMBER' 
                THEN replace( ptab_col_val (i)
                  , case when p_decimal_point_char=',' then '.' 
                  else ',' end -- specifiy group separator that might occur based on decimal point 
                  ) -- end replace 
                else
                  ptab_col_val (i)
                end -- check data type 
               );
            EXCEPTION
               WHEN OTHERS THEN
                  raise_application_error(-20000, 'Error on bind: Line=' || p_line_no_dbx || ' column index ' || TO_CHAR (i)
                                             );
            END bind_column_value;
         END LOOP;   -- over declaration of bind variables

         -- bind column values that are not specified in the CSV line because it contains less items
         -- than the column count
         FOR i IN ptab_col_val.COUNT + 1 .. ptab_col_name.COUNT LOOP
            BEGIN
               DBMS_SQL.bind_variable (c =>          p_prepared_cursor, NAME => ':B' || TO_CHAR (i), VALUE => TO_char (NULL));
            EXCEPTION
               WHEN OTHERS THEN
                  raise_application_error(-200000, 'Error on bind: Line=' || p_line_no_dbx || ' column index ' || TO_CHAR (i)  );
            END bind_null_value;
         END LOOP;   -- over declaration of bind variables
		begin
			l_exec_status := DBMS_SQL.EXECUTE (p_prepared_cursor);
        END exec_insert2table_stmt;
 END gp_insert_row;

 FUNCTION ident_is_normalizable ( pi_ident VARCHAR2 ) 
 RETURN NUMBER 
  AS
  BEGIN
    CASE 
    WHEN  REGEXP_LIKE ( UPPER ( SUBSTR(pi_ident, 1, 1 ) ) , '[A-Z]' )  
      AND REGEXP_LIKE ( UPPER ( SUBSTR( RTRIM(pi_ident), 2 ) ) , '^[A-Z0-9_\$#]*$' ) 
    THEN 
        return 1;
    ELSE 
        return 0;
    END CASE;
  END ident_is_normalizable;

  PROCEDURE   gp_transform_idents ( 
    ptab_ident_in DBMS_SQL.varchar2a
   ,potab_ident OUT DBMS_SQL.varchar2a
  ) AS
    lv_ident VARCHAR2(100);
  BEGIN 
    FOR i IN 1 .. ptab_ident_in.COUNT  
    LOOP
      lv_ident := ptab_ident_in(i);
      lv_ident := 
      CASE WHEN ident_is_normalizable ( lv_ident) = 1  
         THEN UPPER( TRIM( ( lv_ident ) ) )
         ELSE quote_str( lv_ident )
         END 
      ;
      potab_ident(i) := lv_ident;
    END LOOP;
  END gp_transform_idents;
 
BEGIN 
  lv_output_table := upper(lv_ticket_nr||'_csv');
  -- load our data !
  FOR ix IN 1 .. ltab_csv_chunks.COUNT 
  LOOP
  
    INSERT2TABLE(
                P_CSV_STRING => ltab_csv_chunks(ix)
                ,P_TARGET_OBJECT =>   lv_output_table 
            --    ,P_TARGET_SCHEMA =>     ?P_TARGET_SCHEMA
                ,P_DELETE_BEFORE_INSERT2TABLE => ix = 1
                ,P_COL_SEP =>    chr(9) 
           --     ,P_DECIMAL_POINT_CHAR =>        ?P_DECIMAL_POINT_CHAR
                ,P_DATE_FORMAT =>     'dd.Mon.rr'
                ,P_CREATE_TABLE =>   ix = 1
                ,P_CREATE_column_length => 80
				);
  END LOOP;
  dbms_output.put_line( 'check output table '||lv_output_table );
end; 
/

SHOW errors

